{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/Users/abdulaliyev/web-projects/travel-portal/client/components/home/TourCard.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport FitnessIcon from \"@material-ui/icons/FitnessCenterRounded\";\nimport clsx from \"clsx\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { red } from \"@material-ui/core/colors\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport Box from \"@material-ui/core/Box\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport moment from \"moment\";\nimport colorPerLetter from \"../utils/colorPerLetter\";\nimport getHost from \"../utils/getHost\";\nimport Spotlights from \"./Spotlights\";\nimport { colors } from \"../utils/styles\";\nimport CardCollapse from \"./CardCollapse\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 345\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\" // 16:9\n\n  },\n  box: {\n    marginBottom: \"1rem\"\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\"\n  },\n  avatar: {\n    backgroundColor: red[500]\n  },\n  difficultyTitle: {\n    textTransform: \"uppercase\",\n    fontWeight: 700,\n    marginBottom: \"1rem\"\n  },\n  summary: {\n    fontSize: \"1rem\",\n    color: colors.mainBlack\n  }\n}));\nconst StyledRating = withStyles({\n  iconFilled: {\n    color: colors.mainBlue\n  },\n  iconHover: {\n    color: colors.mainBlue\n  }\n})(Rating);\n\nconst TourCard = props => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n  const {\n    name,\n    createdAt,\n    summary,\n    imageCover,\n    difficulty,\n    duration,\n    startDates,\n    startLocation,\n    locations,\n    maxGroupSize\n  } = props;\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const firstLetter = name.toLowerCase().split(\"the \")[1][0].toUpperCase();\n  const closestTourDate = moment(closestDate(startDates)).format(\"MMMM YYYY\");\n  const place = startLocation && startLocation.description ? startLocation.description : \"\";\n  const stops = locations ? locations.length : 0;\n  console.log(\"closestTourDate = \", closestTourDate);\n  return __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    lg: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(Card, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, __jsx(CardHeader, {\n    avatar: __jsx(Avatar, {\n      \"aria-label\": \"recipe\",\n      className: classes.avatar,\n      style: {\n        backgroundColor: colorPerLetter(firstLetter)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, firstLetter),\n    action: __jsx(IconButton, {\n      \"aria-label\": \"settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, __jsx(MoreVertIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })),\n    title: name,\n    subheader: moment(createdAt * 1).format(\"MMMM Do YYYY\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), __jsx(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, __jsx(CardMedia, {\n    className: classes.media,\n    image: `${getHost()}/img/tours/${imageCover}`,\n    title: \"Paella dish\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }), __jsx(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, __jsx(Box, {\n    className: classes.box,\n    component: \"fieldset\",\n    mb: 3,\n    borderColor: \"transparent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, __jsx(Typography, {\n    component: \"legend\",\n    className: classes.difficultyTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, difficulty === \"medium\" ? \"medium-difficult\" : difficulty, \" \", duration, \"-day-trip\"), __jsx(StyledRating, {\n    name: \"Difficulty Level\",\n    precision: 1,\n    readOnly: true,\n    defaultValue: difficulty === \"easy\" ? 1 : difficulty === \"medium\" ? 2 : 3,\n    max: 3,\n    icon: __jsx(FitnessIcon, {\n      fontSize: \"inherit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  })), __jsx(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    component: \"p\",\n    className: classes.summary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, summary))), __jsx(Spotlights, {\n    date: closestTourDate,\n    place: place,\n    stops: stops,\n    people: maxGroupSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), __jsx(CardActions, {\n    disableSpacing: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, __jsx(IconButton, {\n    \"aria-label\": \"add to favorites\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, __jsx(FavoriteIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  })), __jsx(IconButton, {\n    \"aria-label\": \"share\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, __jsx(ShareIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  })), __jsx(IconButton, {\n    className: clsx(classes.expand, {\n      [classes.expandOpen]: expanded\n    }),\n    onClick: handleExpandClick,\n    \"aria-expanded\": expanded,\n    \"aria-label\": \"show more\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, __jsx(ExpandMoreIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }))), __jsx(CardCollapse, {\n    expanded: expanded,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  })));\n};\n\nfunction closestDate(dateStrings) {\n  const currentDate = _Date$now();\n\n  let date = -1;\n\n  if (dateStrings.length) {\n    let futureDateExists = dateStrings.some(d => _parseInt(d) > currentDate);\n\n    if (futureDateExists) {\n      for (let i = 0; i < dateStrings.length; i++) {\n        const dateItem = _parseInt(dateStrings[i]);\n\n        if (dateItem > currentDate) {\n          date = dateItem;\n          break;\n        }\n      }\n    } else {\n      for (let i = dateStrings.length - 1; i >= 0; i--) {\n        const dateItem = _parseInt(dateStrings[i]);\n\n        if (dateItem <= currentDate) {\n          date = dateItem;\n          break;\n        }\n      }\n    }\n  }\n\n  return date;\n}\n\nexport default TourCard;","map":{"version":3,"sources":["/Users/abdulaliyev/web-projects/travel-portal/client/components/home/TourCard.tsx"],"names":["React","Grid","makeStyles","withStyles","FitnessIcon","clsx","Card","CardHeader","CardMedia","CardContent","CardActions","Avatar","IconButton","Typography","red","FavoriteIcon","ShareIcon","ExpandMoreIcon","MoreVertIcon","CardActionArea","Box","Rating","moment","colorPerLetter","getHost","Spotlights","colors","CardCollapse","useStyles","theme","root","maxWidth","media","height","paddingTop","box","marginBottom","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","difficultyTitle","textTransform","fontWeight","summary","fontSize","color","mainBlack","StyledRating","iconFilled","mainBlue","iconHover","TourCard","props","classes","expanded","setExpanded","useState","name","createdAt","imageCover","difficulty","startDates","startLocation","locations","maxGroupSize","handleExpandClick","firstLetter","toLowerCase","split","toUpperCase","closestTourDate","closestDate","format","place","description","stops","length","console","log","dateStrings","currentDate","date","futureDateExists","some","d","i","dateItem"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport FitnessIcon from \"@material-ui/icons/FitnessCenterRounded\";\nimport clsx from \"clsx\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { red } from \"@material-ui/core/colors\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport Box from \"@material-ui/core/Box\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport moment from \"moment\";\nimport colorPerLetter from \"../utils/colorPerLetter\";\nimport getHost from \"../utils/getHost\";\nimport Spotlights from \"./Spotlights\";\nimport { colors } from \"../utils/styles\";\nimport CardCollapse from \"./CardCollapse\";\n\nexport interface StartLocation {\n  description: string;\n  address: string;\n  type: string;\n  coordinates: [number];\n}\n\nexport interface Location {\n  _id: string;\n  description: string;\n  type: string;\n  day: number;\n  coordinates: [number];\n}\n\ninterface Props {\n  name: string;\n  createdAt: number;\n  summary: string;\n  imageCover: string;\n  duration: number;\n  difficulty: string;\n  startDates: [string];\n  startLocation: StartLocation;\n  locations: [Location];\n  maxGroupSize: number;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 345\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\" // 16:9\n  },\n  box: {\n    marginBottom: \"1rem\"\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\"\n  },\n  avatar: {\n    backgroundColor: red[500]\n  },\n  difficultyTitle: {\n    textTransform: \"uppercase\",\n    fontWeight: 700,\n    marginBottom: \"1rem\"\n  },\n  summary: {\n    fontSize: \"1rem\",\n    color: colors.mainBlack\n  }\n}));\n\nconst StyledRating = withStyles({\n  iconFilled: {\n    color: colors.mainBlue\n  },\n  iconHover: {\n    color: colors.mainBlue\n  }\n})(Rating);\n\nconst TourCard: React.FC<Props> = props => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const {\n    name,\n    createdAt,\n    summary,\n    imageCover,\n    difficulty,\n    duration,\n    startDates,\n    startLocation,\n    locations,\n    maxGroupSize\n  } = props;\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const firstLetter = name\n    .toLowerCase()\n    .split(\"the \")[1][0]\n    .toUpperCase();\n\n  const closestTourDate = moment(closestDate(startDates)).format(\"MMMM YYYY\");\n  const place =\n    startLocation && startLocation.description ? startLocation.description : \"\";\n  const stops = locations ? locations.length : 0;\n\n  console.log(\"closestTourDate = \", closestTourDate);\n\n  return (\n    <Grid item xs={12} md={6} lg={4}>\n      <Card className={classes.root}>\n        <CardHeader\n          avatar={\n            <Avatar\n              aria-label=\"recipe\"\n              className={classes.avatar}\n              style={{ backgroundColor: colorPerLetter(firstLetter) }}\n            >\n              {firstLetter}\n            </Avatar>\n          }\n          action={\n            <IconButton aria-label=\"settings\">\n              <MoreVertIcon />\n            </IconButton>\n          }\n          title={name}\n          subheader={moment(createdAt * 1).format(\"MMMM Do YYYY\")}\n        />\n        <CardActionArea>\n          <CardMedia\n            className={classes.media}\n            image={`${getHost()}/img/tours/${imageCover}`}\n            title=\"Paella dish\"\n          />\n          <CardContent>\n            <Box\n              className={classes.box}\n              component=\"fieldset\"\n              mb={3}\n              borderColor=\"transparent\"\n            >\n              <Typography\n                component=\"legend\"\n                className={classes.difficultyTitle}\n              >\n                {difficulty === \"medium\" ? \"medium-difficult\" : difficulty}{\" \"}\n                {duration}-day-trip\n              </Typography>\n              <StyledRating\n                name=\"Difficulty Level\"\n                precision={1}\n                readOnly\n                defaultValue={\n                  difficulty === \"easy\" ? 1 : difficulty === \"medium\" ? 2 : 3\n                }\n                max={3}\n                icon={<FitnessIcon fontSize=\"inherit\" />}\n              />\n            </Box>\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              component=\"p\"\n              className={classes.summary}\n            >\n              {summary}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <Spotlights\n          date={closestTourDate}\n          place={place}\n          stops={stops}\n          people={maxGroupSize}\n        />\n        <CardActions disableSpacing>\n          <IconButton aria-label=\"add to favorites\">\n            <FavoriteIcon />\n          </IconButton>\n          <IconButton aria-label=\"share\">\n            <ShareIcon />\n          </IconButton>\n          <IconButton\n            className={clsx(classes.expand, {\n              [classes.expandOpen]: expanded\n            })}\n            onClick={handleExpandClick}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </CardActions>\n        <CardCollapse expanded={expanded} />\n      </Card>\n    </Grid>\n  );\n};\n\nfunction closestDate(dateStrings) {\n  const currentDate = Date.now();\n  let date = -1;\n\n  if (dateStrings.length) {\n    let futureDateExists = dateStrings.some(\n      (d: string) => parseInt(d) > currentDate\n    );\n    if (futureDateExists) {\n      for (let i = 0; i < dateStrings.length; i++) {\n        const dateItem = parseInt(dateStrings[i]);\n        if (dateItem > currentDate) {\n          date = dateItem;\n          break;\n        }\n      }\n    } else {\n      for (let i = dateStrings.length - 1; i >= 0; i--) {\n        const dateItem = parseInt(dateStrings[i]);\n        if (dateItem <= currentDate) {\n          date = dateItem;\n          break;\n        }\n      }\n    }\n  }\n\n  return date;\n}\n\nexport default TourCard;\n"]},"metadata":{},"sourceType":"module"}
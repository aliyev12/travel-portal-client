{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nexport default (dateStrings => {\n  const currentDate = _Date$now();\n\n  let date = -1;\n\n  if (dateStrings.length) {\n    let futureDateExists = dateStrings.some(d => _parseInt(d) > currentDate);\n\n    if (futureDateExists) {\n      for (let i = 0; i < dateStrings.length; i++) {\n        const dateItem = _parseInt(dateStrings[i]);\n\n        if (dateItem > currentDate) {\n          date = dateItem;\n          break;\n        }\n      }\n    } else {\n      for (let i = dateStrings.length - 1; i >= 0; i--) {\n        const dateItem = _parseInt(dateStrings[i]);\n\n        if (dateItem <= currentDate) {\n          date = dateItem;\n          break;\n        }\n      }\n    }\n  }\n\n  return date;\n});","map":{"version":3,"sources":["/Users/abdulaliyev/web-projects/travel-portal/client/components/home/closestDate.ts"],"names":["dateStrings","currentDate","date","length","futureDateExists","some","d","i","dateItem"],"mappings":";;AAAA,gBAAgBA,WAAD,IAAmC;AAChD,QAAMC,WAAW,GAAG,WAApB;;AACA,MAAIC,IAAI,GAAG,CAAC,CAAZ;;AAEA,MAAIF,WAAW,CAACG,MAAhB,EAAwB;AACtB,QAAIC,gBAAgB,GAAGJ,WAAW,CAACK,IAAZ,CACpBC,CAAD,IAAe,UAASA,CAAT,IAAcL,WADR,CAAvB;;AAGA,QAAIG,gBAAJ,EAAsB;AACpB,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,WAAW,CAACG,MAAhC,EAAwCI,CAAC,EAAzC,EAA6C;AAC3C,cAAMC,QAAQ,GAAG,UAASR,WAAW,CAACO,CAAD,CAApB,CAAjB;;AACA,YAAIC,QAAQ,GAAGP,WAAf,EAA4B;AAC1BC,UAAAA,IAAI,GAAGM,QAAP;AACA;AACD;AACF;AACF,KARD,MAQO;AACL,WAAK,IAAID,CAAC,GAAGP,WAAW,CAACG,MAAZ,GAAqB,CAAlC,EAAqCI,CAAC,IAAI,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAChD,cAAMC,QAAQ,GAAG,UAASR,WAAW,CAACO,CAAD,CAApB,CAAjB;;AACA,YAAIC,QAAQ,IAAIP,WAAhB,EAA6B;AAC3BC,UAAAA,IAAI,GAAGM,QAAP;AACA;AACD;AACF;AACF;AACF;;AAED,SAAON,IAAP;AACD,CA5BD","sourcesContent":["export default (dateStrings: [string]): number => {\n  const currentDate = Date.now();\n  let date = -1;\n\n  if (dateStrings.length) {\n    let futureDateExists = dateStrings.some(\n      (d: string) => parseInt(d) > currentDate\n    );\n    if (futureDateExists) {\n      for (let i = 0; i < dateStrings.length; i++) {\n        const dateItem = parseInt(dateStrings[i]);\n        if (dateItem > currentDate) {\n          date = dateItem;\n          break;\n        }\n      }\n    } else {\n      for (let i = dateStrings.length - 1; i >= 0; i--) {\n        const dateItem = parseInt(dateStrings[i]);\n        if (dateItem <= currentDate) {\n          date = dateItem;\n          break;\n        }\n      }\n    }\n  }\n\n  return date;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/abdulaliyev/web-projects/travel-portal/client/components/home/TourCards.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport TourCard from \"./TourCard\";\nexport const TourFragment = gql`\n  fragment TourFragment on Tour {\n    id\n    slug\n    name\n    price\n    rating\n    description\n    ratingsAverage\n    ratingsQuantity\n    duration\n    createdAt\n    maxGroupSize\n    summary\n    imageCover\n    difficulty\n    startDates\n    guides {\n      id\n      role\n      name\n      email\n      photo\n      createdAt\n      updatedAt\n    }\n    startLocation {\n      description\n      address\n      coordinates\n      type\n    }\n    locations {\n      _id\n      description\n      day\n      coordinates\n      type\n    }\n  }\n`;\nconst ALL_TOURS = gql`\n  query ALL_TOURS {\n    getAllTours {\n      ...TourFragment\n    }\n  }\n  ${TourFragment}\n`;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  }\n}));\n\nconst TourCards = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(ALL_TOURS);\n  const classes = useStyles();\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Loading ...\");\n  const {\n    getAllTours\n  } = data;\n  return __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, getAllTours && getAllTours.length && getAllTours.map(tour => {\n    return __jsx(TourCard, _extends({\n      key: tour.id\n    }, tour, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }));\n  }));\n};\n\nexport default TourCards;","map":{"version":3,"sources":["/Users/abdulaliyev/web-projects/travel-portal/client/components/home/TourCards.tsx"],"names":["React","Grid","makeStyles","useQuery","gql","TourCard","TourFragment","ALL_TOURS","useStyles","theme","root","flexGrow","TourCards","loading","error","data","classes","getAllTours","length","map","tour","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,MAAMC,YAAY,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAzB;AA0CP,MAAMG,SAAS,GAAGH,GAAI;;;;;;IAMlBE,YAAa;CANjB;AAWA,MAAME,SAAS,GAAGN,UAAU,CAACO,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN;AAD+B,CAAL,CAAN,CAA5B;;AAMA,MAAMC,SAA0B,GAAG,MAAM;AACvC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACI,SAAD,CAAzC;AACA,QAAMS,OAAO,GAAGR,SAAS,EAAzB;AAEA,MAAIK,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AAEb,QAAM;AAAEI,IAAAA;AAAF,MAAkBF,IAAxB;AAEA,SACE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,WAAW,IACVA,WAAW,CAACC,MADb,IAECD,WAAW,CAACE,GAAZ,CAAgBC,IAAI,IAAI;AACtB,WAAO,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACC;AAApB,OAA4BD,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAFD,CAHJ,CADF;AASD,CAjBD;;AAmBA,eAAeR,SAAf","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport TourCard from \"./TourCard\";\n\nexport const TourFragment = gql`\n  fragment TourFragment on Tour {\n    id\n    slug\n    name\n    price\n    rating\n    description\n    ratingsAverage\n    ratingsQuantity\n    duration\n    createdAt\n    maxGroupSize\n    summary\n    imageCover\n    difficulty\n    startDates\n    guides {\n      id\n      role\n      name\n      email\n      photo\n      createdAt\n      updatedAt\n    }\n    startLocation {\n      description\n      address\n      coordinates\n      type\n    }\n    locations {\n      _id\n      description\n      day\n      coordinates\n      type\n    }\n  }\n`;\n\nconst ALL_TOURS = gql`\n  query ALL_TOURS {\n    getAllTours {\n      ...TourFragment\n    }\n  }\n  ${TourFragment}\n`;\n\ninterface Props {}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  }\n}));\n\nconst TourCards: React.FC<Props> = () => {\n  const { loading, error, data } = useQuery(ALL_TOURS);\n  const classes = useStyles();\n\n  if (loading) return <p>Loading ...</p>;\n\n  const { getAllTours } = data;\n\n  return (\n    <Grid container spacing={3}>\n      {getAllTours &&\n        getAllTours.length &&\n        getAllTours.map(tour => {\n          return <TourCard key={tour.id} {...tour} />;\n        })}\n    </Grid>\n  );\n};\n\nexport default TourCards;\n"]},"metadata":{},"sourceType":"module"}